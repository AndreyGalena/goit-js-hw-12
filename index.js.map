{"version":3,"file":"index.js","sources":["../src/js/shared.js","../src/js/pixabay-api.js","../src/js/additional_effects.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["\nexport const form = document.querySelector('.form');\nexport const gallery = document.getElementById('gallery');\nexport const loader = document.getElementById('loader');\nexport const buttonMore = document.querySelector('.buttonMore');\n\nexport const globalVariables = {\n    page: 1,       // номер начальной страницы\n    per_page: 15,  // элементав на страницу\n    fullPages: 1,  // всего страниц\n    query: null    // ввод пользователя\n}","/* \n    В файле pixabay-api.js сохраняй функции для выполнения HTTP-запросов:\n*/\nimport axios from \"axios\";\nimport { globalVariables } from './shared';\n\nconst API_KEY = '18618260-23b6d79f5c2a85fb2d6c9be6b';\nconst url = `https://pixabay.com/api`;\n\n\nexport async function getImagesByQuery(query, page) {\n    const params = new URLSearchParams({\n        key: API_KEY,\n        q: query,\n        per_page: globalVariables.per_page,\n        page: page,\n        lang: 'ru',\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: true,\n    });\n\n    const response = await axios(`${url}/?${params}`)\n    return response.data;\n}\n\n","import { hideLoader, showLoadMoreButton } from './render-functions';\nimport { globalVariables } from './shared';\n\n\nexport function ghostEffectBlock() {\n    /* Плавное появление всего блока после загрузки вех изображений */\n\n    const galleryItems = document.querySelectorAll('.gallery-item');\n    const images = Array.from(galleryItems).map(item => item.querySelector('img'));\n\n    let loadedCount = 0;\n\n    images.forEach(img => {\n        const onLoad = () => {\n            loadedCount++;\n            if (loadedCount === images.length) {\n                // Все изображения загружены — показываем весь блок\n\n                // Добавление класса 'visible' с каскадом\n                galleryItems.forEach((item, index) => {\n                    setTimeout(() => {\n                        item.classList.add('visible')\n                    }, index * 50); // каскадная задержка\n                });\n                // убирает Loader\n                hideLoader();\n                if (globalVariables.page <= globalVariables.fullPages) {\n                    // показывает кнопку More\n                    showLoadMoreButton();\n                }\n            }\n        };\n\n        if (img.complete) {\n            // Изображение уже загружено (кеш)\n            onLoad();\n        } else {\n            img.addEventListener('load', onLoad);\n        }\n    });\n}","/* \n    В файле render-functions.js создай экземпляр SimpleLightbox для работы с модальным окном \n    и сохраняй функции для отображения элементов интерфейса:\n*/\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\nimport { ghostEffectBlock } from './additional_effects';\nimport { gallery, loader, buttonMore } from './shared';\n\n\nlet lightbox = new SimpleLightbox('.gallery a', {\n    captions: true,\n    captionSelector: 'img',\n    captionType: 'attr',\n    captionPosition: 'bottom',\n    captionDelay: 250,\n});\n\n\nfunction createMarkup(arr) {\n    return arr.map((img) => `\n    <div class=\"gallery-item\">\n        <a class=\"gallery-link\" href=\"${img.largeImageURL}\">\n            <img class=\"gallery-image\" src=\"${img.webformatURL}\" data-source=\"${img.largeImageURL}\" loading=\"lazy\" alt=\"${img.tags}\" />\n            <div class=\"gallery-textBox\">\n                <div>\n                    <p>Likes</p>\n                    <p>${img.likes}</p>\n                </div>\n                <div>\n                    <p>Views</p>\n                    <p>${img.views}</p>\n                </div>\n                <div>\n                    <p>Comments</p>\n                    <p>${img.comments}</p>\n                </div>\n                <div>\n                    <p>Downloads</p>\n                    <p>${img.downloads}</p>\n                </div>\n            </div>\n        </a>\n    </div>\n  `).join(\"\");\n}\n\n\nexport function createGallery(images) {\n    if (gallery) {\n        gallery.insertAdjacentHTML(\"beforeend\", createMarkup(images));\n        // Плавное появление img при загрузке\n        ghostEffectBlock();\n        // Обновление галереи\n        lightbox.refresh();\n    }\n}\n\nexport function clearGallery() {\n    /* Очищает содержимое контейнера галереи */\n    gallery.innerHTML = \"\";\n}\n\nexport function showLoader() {\n    /* Показывает лоадер */\n    // удалить чтобы стал видемый\n    loader.classList.remove('hidden');\n}\n\nexport function hideLoader() {\n    /* Скрыть лоадер */\n    loader.classList.add('hidden');\n}\n\nexport function showLoadMoreButton() {\n    /* Меняет класс для отображения кнопки Load more. */\n    buttonMore.classList.replace(\"hideLoadMoreButton\", \"showLoadMoreButton\");\n}\n\nexport function hideLoadMoreButton() {\n    /* Меняет класс для скрытия кнопки Load more */\n    buttonMore.classList.replace(\"showLoadMoreButton\", \"hideLoadMoreButton\");\n}","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport { globalVariables, form, buttonMore } from './js/shared';\nimport { getImagesByQuery } from './js/pixabay-api';\nimport {\n    createGallery,\n    showLoader,\n    hideLoadMoreButton,\n    clearGallery\n} from './js/render-functions';\n\n\n\niziToast.success({\n    title: 'Внимание!',\n    message: 'Мы готовы к работе !',\n    position: 'topRight'\n});\n\n/* \nAPI_KEY находится:\nhttps://pixabay.com/api/docs/\nParameters -> key (required)\tstr\tYour API key: 18618260-23b6d79f5c2a85fb2d6c9be6b\n*/\n\n\nasync function takeImages() {\n    try {\n        // показать лоадер\n        showLoader();\n        const data = await getImagesByQuery(globalVariables.query, globalVariables.page);\n        return data;\n    } catch (error) {\n        iziToast.error({\n            title: 'Error!',\n            icon: 'fa-solid fa-xmark',\n            iconColor: 'white',\n            message: `${error.message}`,\n            messageColor: 'white',\n            position: 'center',\n            timeout: 5000,\n            progressBar: true,\n            backgroundColor: 'red',\n        });\n    }\n}\n\n\nform.addEventListener('submit', async (event) => {\n    event.preventDefault();\n    // обнуление начальной страницы\n    globalVariables.page = 1;\n    // убирает кнопку buttonMore\n    hideLoadMoreButton();\n    // очищает галерею\n    clearGallery();\n    // пользовательский ввод\n    globalVariables.query = form.elements['search-text'].value.trim();\n    // если ничего то.\n    if (!globalVariables.query) return;\n    // Делает запрос на сервер\n    const data = await takeImages(); // ждёт\n    console.log('data ', data);\n\n    // количество страниц\n    globalVariables.fullPages = Math.floor(data.totalHits / globalVariables.per_page);\n    // создаём разметку\n    createGallery(data.hits);\n})\n\nbuttonMore.addEventListener('click', async (event) => {\n    event.preventDefault();\n    // убирает кнопку More\n    hideLoadMoreButton();\n    globalVariables.page++;\n    // Делает запрос на сервер\n    const data = await takeImages(); // ждёт\n    // создаём разметку\n    createGallery(data.hits);\n})"],"names":["form","gallery","loader","buttonMore","globalVariables","API_KEY","url","getImagesByQuery","query","page","params","axios","ghostEffectBlock","galleryItems","images","item","loadedCount","img","onLoad","index","hideLoader","showLoadMoreButton","lightbox","SimpleLightbox","createMarkup","arr","createGallery","clearGallery","showLoader","hideLoadMoreButton","iziToast","takeImages","error","event","data"],"mappings":"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"}